

void ft_fool_around(t_game *game)
{
	float ray_x;
	float ray_y;
	float ray_x_off;
	float ray_y_off;
	float ray_angle;
	float aTan;
	int view;
	int x;
	int y;
	
	ray_angle = game->pl.angle;
	aTan = -1/tan(ray_angle);
	view = 0;
	if (ray_angle > PI)
	{
		ray_y = (((int)game->pl.mm_p.y>>4)<<4) - 0.0001;
		ray_x = (game->pl.mm_p.y - ray_y) * aTan + game->pl.mm_p.x;
		ray_y_off = -16;
		ray_x_off = -ray_y_off * aTan;
	}
	if(ray_angle < PI)
	{
		ray_y = (((int)game->pl.mm_p.y>>4)<<4) + 16;
		ray_x = (game->pl.mm_p.y - ray_y) * aTan + game->pl.mm_p.x;
		ray_y_off = +16;
		ray_x_off = -ray_y_off * aTan;
	}
	if (ray_angle == 0 || ray_angle == PI)
	{
		ray_x = game->pl.mm_p.x;
		ray_y = game->pl.mm_p.y;
	}
	while (view < 8)
	{
		x = (int)(ray_x) >> 4;
		y = (int)(ray_y) >> 4;
		printf("%d %d \n", x, y);
		if (game->map.col_c*y+x < game->map.col_c*game->map.row_c &&  game->map.grid[x][y] == '1')
			view = 8;
		else
		{
			ray_x += ray_x_off;
			ray_y += ray_y_off;
			view++;
		}
	}
	ft_save_point(&game->start, 0, 0);
	ft_save_point(&game->end, ray_x, ray_y); //depth of view
	ft_draw_pl_dir(game);
}